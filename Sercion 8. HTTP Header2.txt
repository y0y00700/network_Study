Section 8. HTTP Header2

캐시 기본 동작
캐시가 없을 때 
데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야 함.

캐시 적용 cache-control: max-age=60 (60초동안 유효한 캐시) 

캐시 적용
캐시 덕분에 캐시 가능 시간동안 네트워크 사용 x
비싼 네트워크 사용량을 줄일 수 있다.
브라우저 로딩 속도가 매우 빠르다.

캐시 시간 초과
캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다.
이때 다시 네트워크 다운로드가 재발생 한다.

검증 헤더와 조건부 요청
캐시 유효 시간이 초과해서 서버에 다시 요청하면 다음 두 가지 상황
1.서버에서 기존 데이터를 변경.
2.서버에서 기존 데이터를 변경하지 않음.

검증 헤더 
Last-Modified : 2022 - 11 - 10 10:00:00
응답 결과를 캐시에 저장

정리 : 
캐시 유효 시간이 초과해도 서버의 데이터가 갱신되지 않으면
304 Not Modified + 헤더 메타 정보만 응답(바디X)
클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
클라이언트는 캐시에 저장되어 있는 데이터 재활용
결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드


검증헤더와 조건부 요청2

검증 헤더
캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
Last-Modified , ETag

조건부 요청 헤더
검증 헤더로 조건에 따른 분기
If-Modified-Since : Last-Modified 사용
If-None-Match : ETag 사용
조건이 만족하면 200 OK
조건이 만족하지 않으면 304 Not Modified

Last-Modified, If-Modified-Since 단점
1초 미만 캐시 조정 불가능
날짜 기반의 로직 사용
데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
서버에서 별도의 캐시 로직을 관리하고 싶은 경우
 예) 스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우

ETag(Entity Tag)
캐시용 데이터에 임의의 고유한 버전 이름을 달아 둠.
 ex) ETag : "v1.0" , ETag:"asodww2"
데이터가 변경되면 이 이름을 바꾸어서 변경함(Hash를 다시 생성)

단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기

캐시 제어 로직을 서버에서 완전히 관리
클라이언트는 단순히 이 값을 서버에 제공(클라이언트는 캐시 메커니즘을 모름)

캐시와 조건부 요청 헤더 예
Cache-Control : 캐시 제어
Pragma : 캐시 제어(하위 호환)
Expires : 캐시 유효 기간 (하위 호환)

프록시 캐시
원 서버 직접 접근하지 않고, 프록시 서버에 접근하여, 요청

캐시 무효화
Cache-Control : no-cache,no-store,must-revalidate
Pragma : no-cache(HTTP 1.0 하위 호환)

