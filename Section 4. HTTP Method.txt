HTTP Method
HTTP API 만들기
 요구사항
 회원 정보 관리 API를 만들어야 함
 회원 목록 조회 /read-member-list
 회원 조회 /read-member-by-id
 회원 등록 /create-member
 회원 수정 /update-member
 회원 삭제 /delete-member

 -1. API URI 설계
  가장 중요한 것은 리소스 식별이 가능해야 함.
  리소스의 의미
  회원을 등록하고 수정하고 조회하는게 리소스가 아니다.
  리소스를 어떻게 식별하는게 좋을까?
  회원을 등록하고 수정하고 조회하는 것을 모두 배제
  회원이라는 리소스만 식별하면 된다 -> URI에 매핑

  변경


 회원 목록 조회 /read-member-list -> /members
 회원 조회 /read-member-by-id -> /members/{id}
 회원 등록 /create-member -> /members/{id}
 회원 수정 /update-member -> /members/{id}
 회원 삭제 /delete-member -> /members/{id}

구분? 
 URI는 리소스만 식별
 리소스와 해당 리소스를 대상으로 하는 행위를 분리
 리소스: 회원
 행위: 조회,등록,삭제,변경
 리소스는 명사, 행위는 동사
 행위(메소드)는 어떻게 구분할까? ->HTTP 메서드 - GET/POST

HTTP 메서드 - GET,POST
클라이언트가 서버에 요청할 떄 서버에 기대하는 행동을 정의

HTTP 메서드 종류
 GET : 리소스 조회
 POST : 요청 데이터 처리 , 주로 등록에 사용
 PUT : 리소스를 대체, 해당 리소스가 없으면 생성
 PATCH : 리소스 부분 변경
 DELETE : 리소스 삭제

GET 
 리소스 조회
 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터,쿼리 스트링)를 통해서 전달
 메세지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장x

POST
 요청 데이터 처리
 메세지 바디를 통해 서버로 요청 데이터 전달
 서버는 요청 데이터를 처리
 메세지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용

요청 데이터를 어떻게 처리한다는 뜻일까? 예시
 스펙 : POST 메서드는 대상 리소스가 리소스의 고유 한 의미 체계에 따라 요청에 포함
 된 표현을 처리하도록 요청한다.
 예를 들면 POST는 다음과 같은 기능에 사용된다.
  HTML 양식에 입력 된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
   예) HTML FORM에 입력한 정보로 회원 가입, 주문 등에서 사용
  
정리 : 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할 지 정의해야 함.

POST 정리
 새 리소스 생성(등록)
 요청 데이터 처리
 다른 메서드로 처리하기 애매한 경우
   예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
      애매하면 POST

PUT
 리소스를 대체
 리소스가 있으면 대체
 리소스가 없으면 생성
 쉽게 이야기해서 덮어쓰기임(OverWrite)
 중요! 클라이언트가 리소스를 식별
 클라이언트가 리소스 위치를 알고 URI 지정
 POST와 차이점

PATCH 
 리소스를 부분 변경

DELTE 
  리소스 제거

HTTP 메소드의 속성
 안전(Safe Method)
 멱등(Idempotent Method)
 캐시가능(Casheable Method)

안전 
 호출해도 리소스를 변경하지 않는다.
 GET / HEAD

멱등
 f(f(x)) = f(x)
 한번 호출하든 두번 호출하든 100번 호출하든 결과가 같다.
 멱등 메서드
 GET , PUT , DELETE 
 POST 는 멱등이 아니다. 두번 호출하면 같은 결제가 중복해서 발생할 수 있다.
 활용 : 자동 복구 메커니즘 , 서버가 TIMEOUT등으로 정상 응답을 못주었을 때,
         클라이언트가 같은 요청을 다시해도 된다.

 ※ 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지 않는다. 

캐시가능
 응답 결과 리소스를 캐시해서 사용해도 되는가?
 GET/HEAD/POST/PATCH 캐시 가능
 실제로는 GET,HEAD 정도만 캐시로 사용
  POST,PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않다. 
