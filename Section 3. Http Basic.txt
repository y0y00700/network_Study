Section 3. HTTP Basic

1. 모든 것이 HTTP(Hyper Text Transfer Protocol)
HTTP 메세지에 모든 것을 전송
HTML , TEXT , IMAGE , 음성, 영상, 파일
JSON , XML(API)
거의 모든 형태의 데이터 전송 가능
서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용

HTTP 역사
HTTP/1.1 1997년 : 가장 많이 사용, 가장 중요한 버전

기반 프로토콜
TCP : HTTP/1.1 , HTTP/2
UDP : HTTP/3
현재 HTTP/1.1 주로 사용
  HTTP/2, HTTP/3도 점점 증가

HTTP 특징
클라이언트 서버 구조
무상태 프로토콜(statless) , 비연결성
HTTP 메시지
단순함, 확장 가능

특징1. 클라이언트 서버 구조
Request Response 구조
클라이언트는 서버에 요청을 보내고, 응답을 대기
서버가 요청에 대한 결과를 만들어서 응답

특징2. 무상태(Stateless) 프로토콜
서버가 클라이언트의 상태를 보존하지 않는다.
  -> 요청한 내역에 대한 상태를 보관하지 않음.
장점 : 서버 확장성 높음(스케일 아웃)
단점 : 클라이언트가 추가 데이터 전송 해야 함.

무상태는 응답 서버를 쉽게 바꿀 수 있다. -> 무한한 서버 증설 가능
중간에 서버1이 장애가 나도, 서버2가 응답 가능함.
스케일 아웃 - 수평 확장 유리

Stateless 실무 한계
모든 것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
무상태 
  예) 로그인이 필요 없는 단순한 서비스 소개 화면
상태 유지
  예) 로그인

로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
상태 유지는 최소한만 사용

웹 애플리케이션의 설계는 최대한 무상태성으로 설계하는 것이 유리하다.

특징 3. 비 연결성(Connectionless)
 HTTP는 기본이 연결을 유지하지 않는 모델 
 일반적으로 초 단위의 이하의 빠른 속도로 응답
 1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 
 동시에 처리하는 요청은 수십개 이하로 매우 작음.
    예) 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지는 않는다.
 서버 자원을 매우 효율적으로 사용할 수 있다.

한계와 극복
 TCP/IP 연결을 새로 맺어야 함 - 3 way handshake 시간 추가
 웹 브라우저로 사이트를 요청하면 HTML 뿐 아니라 js, css, 
 추가 이미지 등 수 많은 자원이 함께 다운로드
 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결
 HTTP/2 , HTTP/3에서 더 많은 최적화

Stateless를 기억하자
서버 개발자들이 어려워하는 업무
 정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽
 예) 선착순 이벤트 , 명절 KTX 예약, 학과 수업 등록

HTTP 메세지
 요청 메세지와 응답 메세지가 다름.
 - HTTP 메세지 구조
  start-line 시작 라인
  header 헤더
  empty line (CRLF) : 공백라인
  message body

 -1. 시작라인(start-line )
   Request : 
   예) GET /search?q=hello&hl=ko HTTP/1.1
        host:www.google.com
   HTTP 메서드 (GET: 조회)
   요청 대상(/search?q=hello&hl=ko)
   HTTP Version
   GET: 리소스 조회
   POST: 요청 내역 처리
    

요청 메세지 - HTTP 메서드
 종류: GET , POST ,PUT , DELETE
 서버가 수행해야 할 동작 과정

  2) Response 
HTTP 버전
HTTP 상태 코드 : 요청 성공 실패를 나타냄
 200 성공
 400 클라이언트 요청 오류
 500 서버 내부 오류
이유 문구 : 사람이 이해할 수 있는 짧은 문구

HTTP 헤더
 HTTP 전송에 필요한 모든 부가정보
예) 메세지 바디의 내용, 메세지 바티의 크기, 압축,인증,
    요청 클라이언트 (브라우저) 정보, 서버 애플리케이션 정보, 캐시 관리 정보..
 표준 헤더가 너무 많음.
 필요시 임의의 헤더 추가 가능

HTTP 메세지 바디
 실제 전송할 데이터
 HTML 문서, 이미지 ,영상 JSON 등 byte로 표현할 수 있는 모든 데이터 전송 가능

단순함 확장 가능
 HTTP는 단순하다.
 HTTP 메세지도 매우 단순
 크게 성공하는 표준 기술은 단순하지만 확장 가능한 기술

HTTP 정리
 HTTP메세지에 모든것을 전송
 클라이언트 서버 구조
 무상태성
 HTTP 메세지
 단순함 , 확장 가능

